scalar IntID
scalar DateTime

type Query {
  me: LoggedUser

  feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): [Link!]!
}

type Mutation {
  # Create a link
  addLink(url: String!, description: String!): Link!

  # Update a link
  updateLink(id: Int!, url: String, description: String): String

  # Delete a link
  deleteLink(id: Int!): String

  # Delete all links
  deleteAllLinks: String

  # Register new user
  signup(email: String!, password: String!, name: String!): AuthPayload

  # Login into the application
  login(email: String!, password: String!): AuthPayload

  # Add vote
  vote(linkId: ID!): Vote

  # Refresh token
  refreshToken(refreshToken: String!): AuthPayload
}

type Link {
  id: IntID!
  title: String!
  description: String
  url: String!
  postedBy: User
  comments: [Comment!]
  votes: [Vote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: IntID!
  name: String!
  email: String!
  links: [Link!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LoggedUser {
  id: IntID!
  name: String!
  email: String!
  links: [Link]
  comments: [Comment]
  votes: [Vote]
  bio: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: IntID!
  content: String!
  author: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Vote {
  id: IntID!
  link: Link
  user: User
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  username: String!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}
